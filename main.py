import os
import configparser
from os.path import expanduser
from line_con import *
from check_type import KERNEL_TYPE

os.chdir('../')

if os.path.exists(KERNEL_VER_INPUT):
    os.remove((KERNEL_VER_INPUT) + '/install.sh')
    os.remove((KERNEL_VER_INPUT) + '/README.md')
    os.rmdir(KERNEL_VER_INPUT)
    os.mkdir(KERNEL_VER_INPUT)
else:
    os.mkdir(KERNEL_VER_INPUT)

os.chdir(KERNEL_VER_INPUT)

out = open("install.sh", 'w')
head1 = lambda *x, **y: print(*x, **y, file=out) 
head2 = lambda *x, **y: print(*x, **y, file=out) 
head3 = lambda *x, **y: print(*x, **y, file=out) 
head4 = lambda *x, **y: print(*x, **y, file=out) 
head5 = lambda *x, **y: print(*x, **y, file=out) 
head6 = lambda *x, **y: print(*x, **y, file=out) 
head7 = lambda *x, **y: print(*x, **y, file=out) 
head8 = lambda *x, **y: print(*x, **y, file=out) 
head9 = lambda *x, **y: print(*x, **y, file=out) 
head10 = lambda *x, **y: print(*x, **y, file=out) 
head11 = lambda *x, **y: print(*x, **y, file=out) 
head12 = lambda *x, **y: print(*x, **y, file=out) 
head13 = lambda *x, **y: print(*x, **y, file=out) 
head14 = lambda *x, **y: print(*x, **y, file=out) 
head15 = lambda *x, **y: print(*x, **y, file=out) 
head16 = lambda *x, **y: print(*x, **y, file=out) 
head17 = lambda *x, **y: print(*x, **y, file=out) 
head18 = lambda *x, **y: print(*x, **y, file=out) 
head19 = lambda *x, **y: print(*x, **y, file=out) 
head20 = lambda *x, **y: print(*x, **y, file=out) 
head21 = lambda *x, **y: print(*x, **y, file=out) 
head22 = lambda *x, **y: print(*x, **y, file=out) 
head23 = lambda *x, **y: print(*x, **y, file=out) 
head24 = lambda *x, **y: print(*x, **y, file=out) 
head25 = lambda *x, **y: print(*x, **y, file=out) 
head26 = lambda *x, **y: print(*x, **y, file=out) 
head27 = lambda *x, **y: print(*x, **y, file=out) 
head28 = lambda *x, **y: print(*x, **y, file=out) 
head29 = lambda *x, **y: print(*x, **y, file=out) 
head30 = lambda *x, **y: print(*x, **y, file=out) 
head31 = lambda *x, **y: print(*x, **y, file=out) 
head32 = lambda *x, **y: print(*x, **y, file=out) 
head33 = lambda *x, **y: print(*x, **y, file=out) 
head34 = lambda *x, **y: print(*x, **y, file=out) 
head35 = lambda *x, **y: print(*x, **y, file=out) 
head36 = lambda *x, **y: print(*x, **y, file=out) 
head37 = lambda *x, **y: print(*x, **y, file=out) 
head38 = lambda *x, **y: print(*x, **y, file=out) 
head39 = lambda *x, **y: print(*x, **y, file=out) 
head40 = lambda *x, **y: print(*x, **y, file=out) 
head41 = lambda *x, **y: print(*x, **y, file=out) 
head42 = lambda *x, **y: print(*x, **y, file=out) 
head43 = lambda *x, **y: print(*x, **y, file=out) 
head44 = lambda *x, **y: print(*x, **y, file=out) 
head45 = lambda *x, **y: print(*x, **y, file=out) 
head46 = lambda *x, **y: print(*x, **y, file=out) 
head47 = lambda *x, **y: print(*x, **y, file=out) 
head48 = lambda *x, **y: print(*x, **y, file=out) 
head49 = lambda *x, **y: print(*x, **y, file=out) 
head50 = lambda *x, **y: print(*x, **y, file=out) 
head51 = lambda *x, **y: print(*x, **y, file=out) 
head52 = lambda *x, **y: print(*x, **y, file=out) 
head53 = lambda *x, **y: print(*x, **y, file=out) 

op = open("README.md", 'w')
read1 = lambda *x, **y: print(*x, **y, file=op) 
read2 = lambda *x, **y: print(*x, **y, file=op) 
read3 = lambda *x, **y: print(*x, **y, file=op) 
read4 = lambda *x, **y: print(*x, **y, file=op) 
read5 = lambda *x, **y: print(*x, **y, file=op) 
read6 = lambda *x, **y: print(*x, **y, file=op) 
read7 = lambda *x, **y: print(*x, **y, file=op) 
read8 = lambda *x, **y: print(*x, **y, file=op) 
read9 = lambda *x, **y: print(*x, **y, file=op) 
read10 = lambda *x, **y: print(*x, **y, file=op) 
read11 = lambda *x, **y: print(*x, **y, file=op) 
read12 = lambda *x, **y: print(*x, **y, file=op) 
read13 = lambda *x, **y: print(*x, **y, file=op) 
read14 = lambda *x, **y: print(*x, **y, file=op) 
read15 = lambda *x, **y: print(*x, **y, file=op) 
read16 = lambda *x, **y: print(*x, **y, file=op) 
read17 = lambda *x, **y: print(*x, **y, file=op) 
read18 = lambda *x, **y: print(*x, **y, file=op) 
read19 = lambda *x, **y: print(*x, **y, file=op) 
read20 = lambda *x, **y: print(*x, **y, file=op) 
read21 = lambda *x, **y: print(*x, **y, file=op) 
read22 = lambda *x, **y: print(*x, **y, file=op) 
read23 = lambda *x, **y: print(*x, **y, file=op) 
read24 = lambda *x, **y: print(*x, **y, file=op) 
read25 = lambda *x, **y: print(*x, **y, file=op) 


head1(line1)
head2(empty)
head3(line3)
head4(line4)
head5(empty)
head6(line6)
head7(line7)
head8(line8)
head9(line9)
head10(line10)
head11(line11)
head12((wget) + (empty1) + (wget1))
head13((wget) + (empty1) + (wget2))
head14((wget) + (empty1) + (wget3))
head15((wget) + (empty1) + (wget4))
head16(line16)
head17(cd)
head18(line18)
head19(line19)
head20(line20)
head21(line21)
head22(line22)
head23(line23)
head24(line24)
head25(line25)
head26(line26)
head27(line27)
head28(line10)
head29(line11)
head30((wget) + (empty1) + (wget5))
head31((wget) + (empty1) + (wget6))
head32((wget) + (empty1) + (wget7))
head33(line16)
head34(cd)
head35(line18)
head36(line25)
head37(line26)
head38(line38)
head39(line39)
head40(line40)
head41(line41)
head42(line42)
head43(line43)
head44(line19)
head45(line20)
head46(line46)
head47(line22)
head48(line48)
head49(line24)
head50(line25)
head51(line26)
head52(line52)
head53(line53)

read1(text1)
read2(empty)
read3(text3)
read4(empty)
read5(text5)
read6(text6)
read7(text7)
read8(text8)
read9(text9)
read10(text6)
read11(text11)
read12(text8)
read13(text13)
read14(empty)
read15(text5)
read16(text6)
read17(text17)
read18(text8)
read19(text9)
read20(text6)
read21(text11)
read22(text8)
read23(empty)
read24(empty)
read25(text25)


#parser = configparser.ConfigParser()

#PUSH = parser.get('github', "push")
#PUSH_TRUE = 'True'

#home = expanduser("~")
#if os.path.exists((home) + (CONFIG_DIR)):
#    parser = configparser.ConfigParser()
#    parser.read((home) + (CONFIG_DIR) + (CONFIG_FILE))
#    print(parser['github']['push'])
#    if (PUSH) == (PUSH_TRUE):
#        os.system('git add --all')
#        os.system(COMMIT_MSG)
#        os.system('git push')

#os.chdir('/home/quinten/Downloads/test/mainline')


#ull1 = os.system('ls -d */')

#pill = open("output.txt", 'w')
#ul1 = lambda *x, **y: print(*x, **y, file=pill) 

#ul1(ull1)
